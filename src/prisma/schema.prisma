generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  VENDOR
  DRIVER
}

model User {
  id         Int      @id @default(autoincrement())
  name       String?
  phone      String?  @unique
  email      String?  @unique
  role       UserRole @default(DRIVER)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Vendor     Vendor?
  Driver     Driver?
}

model Document {
  id         Int      @id @default(autoincrement())
  type       String
  filename   String
  key        String?
  url        String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  vendor_id  Int?
  driver_id  Int?
  Vendor     Vendor?  @relation(fields: [vendor_id], references: [id])
  Driver     Driver?  @relation(fields: [driver_id], references: [id])
}

model Vendor {
  id                   Int                    @id @default(autoincrement())
  User                 User                   @relation(fields: [user_id], references: [id])
  user_id              Int                    @unique
  name                 String
  avatar               String?
  email                String                 @unique
  phone                String                 @unique
  address              String
  city                 String
  state                String
  pincode              String
  rating               Float?
  isDeleted            Boolean                @default(false)
  isActive             Boolean                @default(true)
  ageOfCompany         Int?
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  Documents            Document[]
  ClientSites          ClientSite[]
  MetaData             MetaData[]
  BusinessModel        BusinessModel[]
  Driver               Driver[]
  Campaign             Campaign[]
  EarningUploadHistory EarningUploadHistory[]
}

enum DriverStatus {
  ACTIVE
  IN_ACTIVE
}

model Driver {
  id                  Int                   @id @default(autoincrement())
  User                User                  @relation(fields: [user_id], references: [id])
  user_id             Int                   @unique
  status              DriverStatus
  name                String?
  avatar              String?
  phone               String                @unique
  email               String?
  address             String?
  gender              String?
  bankName            String?
  accNumber           String?
  ifscCode            String?
  dob                 DateTime?
  vehicleImage        String?
  vehicleMake         String?
  vehicleModel        String?
  vehicleType         String?
  vehicleFuelType     String?
  vehicleYear         String?
  vehicleNumber       String?
  ownerName           String?
  ownerAddress        String?
  ownerPhoneNumber    String?
  Vendor              Vendor?               @relation(fields: [vendor_id], references: [id])
  vendor_id           Int?
  clientsite_id       Int?
  ClientSite          ClientSite?           @relation(fields: [clientsite_id], references: [id])
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  Documents           Document[]
  MetaData            MetaData[]
  DriverApplication   DriverApplication[]
  isDeleted           Boolean               @default(false)
  isActive            Boolean               @default(true)
  WithdrawTransaction WithdrawTransaction[]
}

model Earning {
  id                 Int         @id @default(autoincrement())
  phone              String
  vehicleNumber      String?
  tripId             String
  tripDate           DateTime
  clientsite_id      Int?
  ClientSite         ClientSite? @relation(fields: [clientsite_id], references: [id])
  distanceTravelled  Int
  escort             Boolean
  dropLocation       String
  tripType           String
  eta                String
  ota                String
  etd                String
  otd                String
  shiftTime          String
  packageFare        Int
  created_at         DateTime    @default(now())
  headCount          Int
  earning            Int?
  eligibleToWithdraw Int?
}

model WithdrawTransaction {
  id                Int         @id @default(autoincrement())
  driver_id         Int?
  Driver            Driver?     @relation(fields: [driver_id], references: [id])
  clientsite_id     Int?
  ClientSite        ClientSite? @relation(fields: [clientsite_id], references: [id])
  withdrawalAmount  Int?
  transactionStatus String
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
}

model EarningUploadHistory {
  id         Int      @id @default(autoincrement())
  fileName   String?
  url        String
  Vendor     Vendor?  @relation(fields: [vendor_id], references: [id])
  vendor_id  Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model AppConfig {
  id         Int      @id @default(autoincrement())
  type       String
  value      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model ClientSite {
  id                  Int                   @id @default(autoincrement())
  name                String
  location            String
  avatar              String
  address             String
  workingDays         Json
  contactNumbers      Json
  isDeleted           Boolean               @default(false)
  isActive            Boolean               @default(true)
  Vendor              Vendor                @relation(fields: [vendor_id], references: [id])
  vendor_id           Int
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  BusinessModel       BusinessModel[]
  Driver              Driver[]
  Earning             Earning[]
  Campaign            Campaign[]
  WithdrawTransaction WithdrawTransaction[]
}

model MetaData {
  id         Int      @id @default(autoincrement())
  key        String
  value      String
  vendor_id  Int?
  driver_id  Int?
  Vendor     Vendor?  @relation(fields: [vendor_id], references: [id])
  Driver     Driver?  @relation(fields: [driver_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum BusinessModelType {
  SLAB
  KM_FARE
  PACKAGE
}

model BusinessModel {
  id            Int               @id @default(autoincrement())
  name          String
  created_at    DateTime          @default(now())
  updated_at    DateTime          @updatedAt
  type          BusinessModelType
  modeldata     Json
  vendor_id     Int
  clientsite_id Int
  Vendor        Vendor            @relation(fields: [vendor_id], references: [id])
  ClientSite    ClientSite        @relation(fields: [clientsite_id], references: [id])
}

enum CampaignStatus {
  ACTIVE
  PAUSED
  INACTIVE
  COMPLETED
}

model Campaign {
  id                Int                 @id @default(autoincrement())
  name              String
  status            CampaignStatus      @default(INACTIVE)
  avgFare           Int
  client_site_id    Int
  ClientSite        ClientSite          @relation(fields: [client_site_id], references: [id])
  Vendor            Vendor              @relation(fields: [vendor_id], references: [id])
  vendor_id         Int
  data              Json
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  DriverApplication DriverApplication[]
}

enum DriverApplicationStatus {
  PENDING
  HOLD
  APPROVED
  REJECTED
}

model DriverApplication {
  id          Int                     @id @default(autoincrement())
  status      DriverApplicationStatus @default(PENDING)
  Campaign    Campaign                @relation(fields: [campaign_id], references: [id])
  campaign_id Int
  Driver      Driver                  @relation(fields: [driver_id], references: [id])
  driver_id   Int
  created_at  DateTime                @default(now())
  updated_at  DateTime                @updatedAt
  isDeleted   Boolean                 @default(false)
  isActive    Boolean                 @default(true)
}

enum ContactFormType {
  CONTACT
  TRY_DEMO
}

model ContactForm {
  id         Int             @id @default(autoincrement())
  name       String
  email      String
  phone      String
  company    String
  state      String?
  city       String?
  message    String?
  found_via  String?
  form_type  ContactFormType @default(TRY_DEMO)
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
}
